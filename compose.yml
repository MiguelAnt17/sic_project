version: "3.8"

services:
  zookeeper: 
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-network
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    volumes:
      - kafka-data:/bitnami/kafka
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    networks:
      - kafka-network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5



  telegraf: 
    image: telegraf:latest
    container_name: telegraf
    volumes:  
      - /root/assignement2/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    networks:
      - kafka-network
      - TICK-network
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "telegraf", "--config", "/etc/telegraf/telegraf.conf", "--test"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
      

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    volumes:
      - data:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=tp2                    
      - INFLUXDB_ADMIN_USER=admin          
      - INFLUXDB_ADMIN_PASSWORD=password   
      - INFLUXDB_HTTP_AUTH_ENABLED=true    
      - INFLUXDB_HTTP_BIND_ADDRESS=:8086   
      - DOCKER_INFLUXDB_INIT_MODE=setup    
      - DOCKER_INFLUXDB_INIT_USERNAME=admin  
      - DOCKER_INFLUXDB_INIT_PASSWORD=password 
      - DOCKER_INFLUXDB_INIT_ORG=sic       
      - DOCKER_INFLUXDB_INIT_BUCKET=tp2   
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=LRk4Qb4QtnFqdn83kYDG-1EXsNRkhFGrdZqJQhfy2IOTN7IIyVhWdwEu8PeKlvhXDHomucMZVOpE7tAPLSx0xQ==
    ports:
      - "8086:8086"                       
    networks:
      - TICK-network                      
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s                         
      timeout: 10s                          
      retries: 3                           
      start_period: 10s                    
    


  python-producer-1: 
    image: producer1
    container_name: python-producer-1
    build: /root/assignement2/producer1
    networks: 
     - kafka-network
    environment:
      - MEAN_TEMP=20
      - STD_DEV_TEMP=5
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=temperature_sensor
      - SENSOR_ID=top
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      telegraf:
        condition: service_healthy


  python-producer-2: 
    image: producer2
    container_name: python-producer-2
    build: /root/assignement2/producer2
    networks: 
     - kafka-network
    environment:
      - MEAN_TEMP=20
      - STD_DEV_TEMP=5
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=temperature_sensor
      - SENSOR_ID=middle
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      telegraf:
        condition: service_healthy
  
  python-producer-3: 
    image: producer3
    container_name: python-producer-3
    build: /root/assignement2/producer3
    networks: 
     - kafka-network
    environment:
      - MEAN_TEMP=20
      - STD_DEV_TEMP=5
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=temperature_sensor
      - SENSOR_ID=bottom
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      telegraf:
        condition: service_healthy

  python-producer-4: 
    image: producer4
    container_name: python-producer-4
    build: /root/assignement2/producer4
    networks: 
     - kafka-network
    environment:
      - MEAN_POWER=200
      - STD_DEV_POWER=10
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=power_usage_sensor
      - SENSOR_ID=4
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      telegraf:
        condition: service_healthy

  python-producer-5: 
    image: producer5
    container_name: python-producer-5
    build: /root/assignement2/producer5
    networks: 
     - kafka-network
    environment:
      - MEAN_TEMP_DIFF=20
      - STD_DEV_TEMP_DIFF=5
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=cooling_efficiency_sensor
      - SENSOR_ID=5
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      telegraf:
        condition: service_healthy
  
  python-producer-6: 
    image: producer6
    container_name: python-producer-6
    build: /root/assignement2/producer6
    networks: 
     - kafka-network
    environment:
      - MEAN_HUMIDITY=35
      - STD_DEV_HUMIDITY=5
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=humidity_sensor
      - SENSOR_ID=6
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      telegraf:
        condition: service_healthy


networks:
  kafka-network:
  TICK-network:

volumes:
  zookeeper-data:
  kafka-data:
  data: